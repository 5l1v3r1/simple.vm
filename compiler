#!/usr/bin/perl -w
#
#  This is a simple "compiler" which will read an input file
# and spit out the corresponding bytecodes for the program.
#
# Steve
# --
#


use strict;
use warnings;


#
#  These are the bytecodes we understand.
#
use constant EXIT         => 0x00;
use constant STORE_STRING => 0x01;
use constant STORE_INT    => 0x02;
use constant PRINT_STRING => 0x03;
use constant PRINT_INT    => 0x04;
use constant JUMP_TO      => 0x06;


#
#  Labels - All are downcased and must be unique per-source.
#
my %LABELS;


#
#  Reocrd of jump destinations we've got to update
#
my @UPDATES;




#
#  Get the input file we'll parse
#
while ( my $file = shift )
{
    my $output = $file;
    $output =~ s/\.[^.]+$//;
    $output .= ".raw";

    print "1. Compiling $file into $output\n";

    open( my $in,  "<", $file )   or die "Failed to read source $file - $!";
    open( my $out, ">", $output ) or die "Failed to write to $output - $!";


    #
    #  Amount of instructions we've output.
    #
    #  This is used for labeling-purposes
    #
    my $offset = 0;

    while ( my $line = <$in> )
    {
        chomp($line);
        next if ( !length($line) || ( $line =~ /^#/ ) );


        if ( $line =~ /^:(.*)/ )
        {
            my $name = $1;
            $LABELS{ $name } = $offset;

            # so we found a label - store the offset of the code in our array.
        }

        if ( $line =~ /store\s+#([0-9]+), ([0-9]+)/ )
        {
            my $reg = $1;
            my $val = $2;

            die "Int too large" if ( $val >= 65535 );

            my $val1 = $val % 256;
            my $val2 = ( $val - $val1 ) / 256;

            print $out chr STORE_INT;
            print $out chr $reg;
            print $out chr $val1;
            print $out chr $val2;

            $offset += 4;
        }

        if ( $line =~ /exit/ )
        {
            print $out chr EXIT;
            $offset += 1;
        }

        if ( $line =~ /store\s+#([0-9]+),\s?"([^"]+)"/ )
        {
            my $reg = $1;
            my $str = $2;
            my $len = length($str);

            print $out chr STORE_STRING;
            print $out chr $reg;
            print $out chr $len;
            print $out $str;

            $offset += 3;              # store + reg + len
            $offset += length($str);
        }

        if ( $line =~ /print_int\s?#(.*)/ )
        {
            my $reg = $1;
            print $out chr PRINT_INT;
            print $out chr $reg;

            $offset += 2;
        }

        if ( $line =~ /print_str\s?#(.*)/ )
        {
            my $reg = $1;
            print $out chr PRINT_STRING;
            print $out chr $reg;

            $offset += 2;
        }

        if ( $line =~ /goto\s+([^ ]+)/ )
        {
            my $label = $1;

            print $out chr JUMP_TO;
            print $out chr 0;    # this will be updated.
            print $out chr 0;    # this will be updated.

            $offset += 3;        # jump + val1 + val2

            #
            # we now need to record the fact we have to patch up this
            # instruction.
            #
            push( @UPDATES,
                  {  offset => ( $offset - 2 ),
                     label  => $label
                  } );
        }
    }


    close($in);
    close($out);

    #
    #  OK now this is nasty - we want to go back and patch up the jump
    # instructions we know we've emitted.
    #
    print "2. Post-compile jump-fixups for $output\n";

    foreach my $update (@UPDATES)
    {
        my $offset = $update->{ 'offset' };
        my $label  = $update->{ 'label' };

        print
          "\tWe must update offset $offset with the destination of the label: $label\n";

        open( my $tmp, "+<", $output ) or die "Failed to write to output - $!";
        seek $tmp, $offset, 0;

        #
        # now we find the target of the label
        #
        my $target = $LABELS{ $label };
        die "No target for label '$label'" unless ( defined($target) );

        my $t1 = $target % 256;
        my $t2 = ( $target - $t1 ) / 256;

        print $tmp chr $t1;
        print $tmp chr $t2;

        close($tmp);
    }
}
